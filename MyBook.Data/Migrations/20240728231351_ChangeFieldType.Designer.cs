// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBook.Data.Context;

#nullable disable

namespace MyBook.Data.Migrations
{
    [DbContext(typeof(MyBookDbContext))]
    [Migration("20240728231351_ChangeFieldType")]
    partial class ChangeFieldType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyBook.Domain.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Edition")
                        .HasColumnType("int");

                    b.Property<string>("PublicationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishingCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.ManyToMany.AuthorBook", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id", "AuthorId", "BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.ManyToMany.SaleTypeBook", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SaleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id", "SaleTypeId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("SaleTypeBook");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.ManyToMany.SubjectBook", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id", "SubjectId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectBook");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.SaleTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SalesType");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.SubjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.ManyToMany.AuthorBook", b =>
                {
                    b.HasOne("MyBook.Domain.Entities.AuthorEntity", "Author")
                        .WithMany("AuthorBook")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBook.Domain.Entities.BookEntity", "Book")
                        .WithMany("AuthorBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.ManyToMany.SaleTypeBook", b =>
                {
                    b.HasOne("MyBook.Domain.Entities.BookEntity", "Book")
                        .WithMany("SaleTypeBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBook.Domain.Entities.SaleTypeEntity", "SaleType")
                        .WithMany("SaleTypeBook")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.ManyToMany.SubjectBook", b =>
                {
                    b.HasOne("MyBook.Domain.Entities.BookEntity", "Book")
                        .WithMany("SubjectBook")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyBook.Domain.Entities.SubjectEntity", "Subject")
                        .WithMany("SubjectBook")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.AuthorEntity", b =>
                {
                    b.Navigation("AuthorBook");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.BookEntity", b =>
                {
                    b.Navigation("AuthorBook");

                    b.Navigation("SaleTypeBook");

                    b.Navigation("SubjectBook");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.SaleTypeEntity", b =>
                {
                    b.Navigation("SaleTypeBook");
                });

            modelBuilder.Entity("MyBook.Domain.Entities.SubjectEntity", b =>
                {
                    b.Navigation("SubjectBook");
                });
#pragma warning restore 612, 618
        }
    }
}
